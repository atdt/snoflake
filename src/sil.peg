// PEG.js Grammar for SIL (SNOBOL Implementation Language)
// Translates SIL to an ESTree-compatible AST.
// (C) Copyright 2012 by Ori Livneh
// Licensed under GPLv2

{
    var labels = {},
        line = 0;

    /**
     * Construct an anonymous function that takes no parameters
     * and returns `value`. Used to make identifiers bind late.
     */
    function enclose( value ) {
        return {
            type: 'FunctionExpression',
            params: [],
            body: {
                type: 'BlockStatement',
                body: [{
                    type: 'ReturnStatement',
                    argument: value,
                }]
            }
        };
    }

    /**
     * Wrap `identifier` with an invocation of `vm.resolve`.
     * e.g. 'SOMENAME' -> vm.$( 'SOMENAME' )
     */
    function resolve( identifier ) {
        return {
            type: 'CallExpression',
            callee: {
                type: 'MemberExpression',
                object: { type: 'Identifier', name: 'vm' },
                property: { type: 'Identifier', name: '$' },
            },
            arguments: [ { type: 'Literal', value: identifier } ],
        };
    }
}

program
  = statements:statement+ end
{
    var params = [ 'vm' ],
        body   = [ [ 'return', [ 'array', statements ] ] ],
        func   = [ 'defun', null, params, body ];

    return {
        type: 'Program',
        body: [
            {
                type: 'ExpressionStatement',
                expression: {
                    type: 'AssignmentExpression',
                    operator: '=',
                    left: {
                        type: 'MemberExpression',
                        computed: false,
                        object: {
                            type: 'Identifier',
                            name: 'SNOBOL'
                        },
                        property: {
                           type: 'Identifier',
                           name: 'interp'
                        }
                    },
                    right: {
                        type: 'FunctionExpression',
                        params: [{ type: 'Identifier', name: 'vm' }],
                        body: {
                            type: 'BlockStatement',
                            body: [ {
                                type: 'ReturnStatement',
                                argument: {
                                type: 'ArrayExpression',
                                elements: statements
                                }
                            } ]
                        },
                    }
                }
            }
        ],
    };
}


statement "statement"
  = comment2* 
    label:label
    blank
    oper:macro
    blank
    operands:operands
    blank?
    comment:comment1?
    '\n'
{
    return {
        type: 'ArrayExpression',
        elements: [ label, oper, operands, comment ]
    };
}


comment1 "trailing comment"
  = head:[^\n]*
    tail:( '\n*\t\t\t\t' tail:[^\t\n]+ { return tail.join( '' ).trim(); } )?
{
    head = head.join( '' ).replace(/^[,\s]+/, '' );
    tail = ( tail || '' ).replace(/^[,\s]+/, '' );
    if ( tail ) {
        head = head + ' ' + tail;
    }
    return {
        type: 'Literal',
        value: head.trim()
    };
}

comment2 "multi-line comment"
  = lines:( '*' comment:[^\n]* '\n' { return comment.join( '' ); } )+
{
    return {
        type: 'Literal',
        value: lines.join( '\n' )
    };
}

operands "operands"
  = head:variable tail:( ',' variable )*
{
    var result = [ head ];
    for ( var i = 0, max = tail.length; i < max; i++ ) {
        result.push( tail[i][1] );
    }
    return enclose( { type: 'ArrayExpression', elements: result } );
}

variable
  = list
  / literal
  / expr
  / name
  / integer
  / &( ',' ) { return { type: 'Literal', value: null }; }


expr "expression"
  = left:( integer / name ) operator:[*+-] right:( expr / integer / name )
{
    return {
        type: 'BinaryExpression',
        operator: operator,
        left: left,
        right: right
    };
}

literal "literal"
  = "'" literal:[^']* "'"
{
    literal = literal.join( '' );
    return { type: 'Literal', value: literal };
}

integer "integer"
  = digits:[0-9]+
{
    var num = parseInt( digits.join( '' ), 10 );
    return { type: 'Literal', value: num };
}

list "list operand"
  = '(' head:variable tail:( ',' v:variable { return v; } )* ')'
{
    var result = [];

    if ( head !== undefined || tail.length ) {
        tail.unshift( head );
        result = tail;
    }

    return { type: 'ArrayExpression', elements: result };
}

blank
  = [\u0009\u0020]+


label "label"
= label:( head:[A-Z] tail:[A-Z0-9]* { return head + tail.join( '' ); } )?
{
    if ( label !== null ) {
        labels[ label ] = line++;
        return { type: 'Literal', value: label };
    } else {
        line++;
        return { type: 'Literal', value: null };
    }
}

name "name"
  = head:[A-Z] tail:[A-Z0-9]*
{
    var name = head + tail.join( '' );
    return resolve( name );
}

macro "macro"
  = head:[A-Z] tail:[A-Z0-9]*
{
    var macro = head + tail.join( '' );
    return { type: 'Literal', value: macro };
}

end
  = blank 'END' ( blank / '\n' )* !.

/* vim: set ft=pegjs: */
