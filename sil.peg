// PEG.js Grammar for SIL (SNOBOL Implementation Language)
// (C) Copyright 2012 by Ori Livneh
// Released under GPL and MIT licenses

{
    var namespace = {};
}

program
  = statements:(statement / comment)+ end
{
    var i = 0, stack = [], identifiers = [], declare;

    // Filter out comments
    statements = statements.filter(function (s) {
        return s[0].indexOf('comment') !== 0;
    });

    // Construct a JavaScript array representing a call stack
    stack = [ "stack", [ "array", statements ] ];

    // Enumerate other identifiers to declare
    for ( name in namespace )
        identifiers.push([ name, ["num", i++ ] ]);

    identifiers.push(stack);
    declare = [ "var", identifiers ];

    return [ "toplevel", [ declare ] ];
}


comment
  = '*' comment:[^\n]* '\n'
{
    return [ "comment2", comment.join('') ];
}

statement
  = label:(name:name? { return name || ["name", "null"] })
    blank
    oper:name
    blank
    operands:operands
    blank?
    comment:(comment:[^\n]* { return ["comment1", comment.join('')]; })
    '\n'
{
    return [ "array", [ oper, operands, label ] ];
}

operands
  = head:variable tail:(',' variable)*
{
    var result = [head];
    for (var i = 0, max = tail.length; i < max; i++) {
        result.push(tail[i][1]);
    }
    return [ "array", result ];
}

variable
  = list
  / literal
  / expr
  / name
  / integer
  / &(',') { return [ "name", "null" ]; }


expr
  = left:(integer / name) operator:[*+-] right:(integer / name)
{
    return [ "binary", operator, left, right ];
}

literal "literal"
  = "'" literal:[^']* "'"
{
    literal = literal.join('');
    return [ "string", literal ];
}

integer "integer"
  = digits:[0-9]+
{
    var num = parseInt(digits.join(''), 10);
    return [ "num", num ];
}

list "operand list"
  = '('
    head:variable
    tail:(',' v:variable { return v; })*
    ')'
{
    var result = [];

    if (head !== undefined || tail.length) {
        tail.unshift(head);
        result = tail;
    }

    return [ "array", result ];
}

blank
  = [\u0009\u0020]+


name "name"
  = head:[A-Z] tail:[A-Z0-9]*
{
    var name = head + tail.join('');

    namespace[name] = ( namespace[name] || 0 ) + 1;
    return [ "name", name ];
}

end
  = blank 'END' (blank / '\n')* !.

/* vim: set ft=javascript: */
