{
    function Node(type, value) {
        this.type = type;
        this.value = value;
    }
}

program
  = (statement '\n')* end

statement
  = label:label? blank operation:operation blank vfield:vfield blank? comment:([^\n]+)?
{
    return [label || null, operation, vfield];
}

operation
  = operation:[A-Z]+
{
    operation = operation.join('');
    return new Node('operation', operation);
}

vfield
  = head:variable tail:(',' variable)*
{
    var result = [head];
    for (var i = 0, max = tail.length; i < max; i++) {
        result.push(tail[i][2]);
    }
    return result;
}

variable
  = list
  / literal
  / label
  / integer
  / ''       { return undefined; }

literal "literal"
  = "'" literal:[^']* "'"
{
    return new Node('literal', literal.join(''));
}

integer "integer"
  = digits:[0-9]+
{
    return parseInt(digits.join(''), 10);
}

list
  = '(' head:item tail:(',' item:item)* ')'
{
    var result = [head];
    for (var i = 0, max = tail.length; i < max; i++) {
        result.push(tail[i][2]);
    }
    return result;
}

item
  = value:(literal / label)
{
    return value;
}

blank
  = [\u0009\u0020]+


label
  = head:[A-Z] tail:[A-Z0-9]*
{
    tail.unshift(head);
    return new Node('label', tail.join(''));
}

end
  = blank 'END' !.
